name: "[CD:Production:Web] Build and Release"
on:
  push:
      tags:
          - "v*.*.*"

env:
  AZURE_FUNCTIONAPP_NAME: 'psp-data-viewer'
  AZURE_FUNCTIONAPP_PACKAGE_PATH: './azure_functions'
  PYTHON_VERSION: '3.11'

permissions:
  contents: write
jobs:
  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
  changelog-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Tag/Release search
        run: echo "GHA_V_COUNTER=$(grep ${{ github.ref_name }} CHANGELOG.md | wc -l)" >> "$GITHUB_ENV"
        shell: bash
      - name: Tag Output
        run: echo "env.GHA_V_COUNTER = ${{ env.GHA_V_COUNTER }}"
        shell: bash
      - name: "If changelog isn't updated, delete the release and tag"
        uses: dev-drprasad/delete-tag-and-release@v1.0
        if: env.GHA_V_COUNTER == '0'
        with:
          tag_name: ${{ github.ref_name }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          delete_release: true
      - name: Find '${{ github.ref_name }}' in CHANGELOG.md
        if: env.GHA_V_COUNTER == '0'
        uses: actions/github-script@v2.1.0
        with:
          script: |
              core.setFailed('CHANGELOG.md not updated to include new release notes for ${{ github.ref_name }}!')
  version-check-webapp:
    runs-on: ubuntu-latest
    outputs:
      version-code: ${{ steps.version-code-gen.outputs.GHA_VERSION_CODE }}
    steps:
        - uses: actions/checkout@v4
        - name: Set up new test tag
          run: |
            TAGNAME=${{ github.ref_name }}
            NEW_NAME="${TAGNAME//v/}"
            echo GHA_NEW_TAG_NAME_WEBAPP=$NEW_NAME >> "$GITHUB_ENV"
        - name: Tag/Release search
          run: echo "GHA_V_COUNTER_WEBAPP=$(grep '${{ format('"version"{0}', ':') }} "${{ env.GHA_NEW_TAG_NAME_WEBAPP }}"' webapp/package.json | wc -l)" >> "$GITHUB_ENV"
          shell: bash
        - name: Tag Output
          run: |
            echo "env.GHA_V_COUNTER_WEBAPP = ${{ env.GHA_V_COUNTER_WEBAPP }}"
            echo "env.GHA_NEW_TAG_NAME_WEBAPP = ${{ env.GHA_NEW_TAG_NAME_WEBAPP }}"
          shell: bash
        - name: "If pubspec isn't updated, delete the release and tag"
          uses: dev-drprasad/delete-tag-and-release@v1.0
          if: env.GHA_V_COUNTER_WEBAPP == '0'
          with:
            tag_name: ${{ github.ref_name }}
            github_token: ${{ secrets.GITHUB_TOKEN }}
            delete_release: true
        - name: Find '${{ github.ref_name }}' in package.json
          if: env.GHA_V_COUNTER_WEBAPP == '0'
          uses: actions/github-script@v2.1.0
          with:
            script: |
                core.setFailed('webapp/package.json not updated to new version ${{ env.GHA_NEW_TAG_NAME_WEBAPP }}!')
  version-check-admin:
    runs-on: ubuntu-latest
    outputs:
      version-code: ${{ steps.version-code-gen.outputs.GHA_VERSION_CODE }}
    steps:
        - uses: actions/checkout@v4
        - name: Set up new test tag
          run: |
            TAGNAME=${{ github.ref_name }}
            NEW_NAME="${TAGNAME//v/}"
            echo GHA_NEW_TAG_NAME_ADMIN=$NEW_NAME >> "$GITHUB_ENV"
        - name: Tag/Release search
          run: echo "GHA_V_COUNTER_ADMIN=$(grep '${{ format('"version"{0}', ':') }} "${{ env.GHA_NEW_TAG_NAME_ADMIN }}"' admin/package.json | wc -l)" >> "$GITHUB_ENV"
          shell: bash
        - name: Tag Output
          run: |
            echo "env.GHA_V_COUNTER_ADMIN = ${{ env.GHA_V_COUNTER_ADMIN }}"
            echo "env.GHA_NEW_TAG_NAME_ADMIN = ${{ env.GHA_NEW_TAG_NAME_ADMIN }}"
          shell: bash
        - name: "If pubspec isn't updated, delete the release and tag"
          uses: dev-drprasad/delete-tag-and-release@v1.0
          if: env.GHA_V_COUNTER_ADMIN == '0'
          with:
            tag_name: ${{ github.ref_name }}
            github_token: ${{ secrets.GITHUB_TOKEN }}
            delete_release: true
        - name: Find '${{ github.ref_name }}' in package.json
          if: env.GHA_V_COUNTER_ADMIN == '0'
          uses: actions/github-script@v2.1.0
          with:
            script: |
                core.setFailed('admin/package.json not updated to new version ${{ env.GHA_NEW_TAG_NAME_ADMIN }}!')
  version-check-docs:
    runs-on: ubuntu-latest
    outputs:
      version-code: ${{ steps.version-code-gen.outputs.GHA_VERSION_CODE }}
    steps:
        - uses: actions/checkout@v4
        - name: Set up new test tag
          run: |
            TAGNAME=${{ github.ref_name }}
            NEW_NAME="${TAGNAME//v/}"
            echo GHA_NEW_TAG_NAME_ADMIN=$NEW_NAME >> "$GITHUB_ENV"
        - name: Tag/Release search
          run: echo "GHA_V_COUNTER_ADMIN=$(grep '${{ format('"version"{0}', ':') }} "${{ env.GHA_NEW_TAG_NAME_ADMIN }}"' docs/package.json | wc -l)" >> "$GITHUB_ENV"
          shell: bash
        - name: Tag Output
          run: |
            echo "env.GHA_V_COUNTER_ADMIN = ${{ env.GHA_V_COUNTER_ADMIN }}"
            echo "env.GHA_NEW_TAG_NAME_ADMIN = ${{ env.GHA_NEW_TAG_NAME_ADMIN }}"
          shell: bash
        - name: "If package.json isn't updated, delete the release and tag"
          uses: dev-drprasad/delete-tag-and-release@v1.0
          if: env.GHA_V_COUNTER_ADMIN == '0'
          with:
            tag_name: ${{ github.ref_name }}
            github_token: ${{ secrets.GITHUB_TOKEN }}
            delete_release: true
        - name: Find '${{ github.ref_name }}' in package.json
          if: env.GHA_V_COUNTER_ADMIN == '0'
          uses: actions/github-script@v2.1.0
          with:
            script: |
                core.setFailed('docs/package.json not updated to new version ${{ env.GHA_NEW_TAG_NAME_ADMIN }}!')

  paths-filter:
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.filter.outputs.workflows }}
    steps:
    - uses: actions/checkout@v4
    - uses: dorny/paths-filter@v3
      id: filter
      with:
        filters: |
          workflows:
            - 'azure_functions/**'
    # run only if 'azure_functions' files were changed
    - name: workflow tests
      if: steps.filter.outputs.workflows == 'true'
      run: echo "Azure Functions will deploy"

    # run only if not 'workflows' files were changed
    - name: not workflow tests
      if: steps.filter.outputs.workflows != 'true'
      run: echo "Will not deploy azure functions"

  build-and-release-webapp:
    runs-on: ubuntu-latest
    needs: [version-check-admin, version-check-webapp, version-check-docs, changelog-check, unit-tests]
    steps:
    - uses: actions/checkout@v4
    - uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
    - name: Build Web App
      working-directory: ./webapp
      run: bun install && bun run prod
    - name: Release Web App 
      uses: FirebaseExtended/action-hosting-deploy@v0
      with:
        repoToken: ${{ secrets.GITHUB_TOKEN }}
        firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_PSP_PORTFOLIO_F1205 }}
        channelId: live
        projectId: psp-portfolio-f1205
        target: webapp

  build-and-release-admin:
    runs-on: ubuntu-latest
    needs: [version-check-admin, version-check-webapp, version-check-docs, changelog-check, unit-tests]
    steps:
    - uses: actions/checkout@v4
    - uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
    - name: Build Admin Webapp
      working-directory: ./admin
      run: bun install && bun run prod
    - name: Release Admin Webapp 
      uses: FirebaseExtended/action-hosting-deploy@v0
      with:
        repoToken: ${{ secrets.GITHUB_TOKEN }}
        firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_PSP_PORTFOLIO_F1205 }}
        channelId: live
        projectId: psp-portfolio-f1205
        target: admin

  build-and-release-docs:
    runs-on: ubuntu-latest
    needs: [version-check-admin, version-check-webapp, version-check-docs, changelog-check, unit-tests]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    - name: NPM install
      working-directory: ./docs
      run: npm install && npm run build
    - name: Release Admin Webapp 
      uses: FirebaseExtended/action-hosting-deploy@v0
      with:
        repoToken: ${{ secrets.GITHUB_TOKEN }}
        firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_PSP_PORTFOLIO_F1205 }}
        channelId: live
        projectId: psp-portfolio-f1205
        target: docs

  build-and-deploy-azure:
    runs-on: ubuntu-latest
    needs: [version-check-admin, version-check-webapp, version-check-docs, changelog-check, unit-tests, paths-filter]
    if: needs.paths-filter.outputs.output1 == 'true'
    environment: Production
    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v3

    - name: Setup Python ${{ env.PYTHON_VERSION }} Environment
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 'Resolve Project Dependencies Using Pip'
      shell: bash
      run: |
        pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
        python -m pip install --upgrade pip
        pip install -r requirements.txt --target=".python_packages/lib/site-packages"
        popd

    - name: 'Run Azure Functions Action'
      uses: Azure/functions-action@v1
      id: fa
      with:
        app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
        package: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
        publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}
        scm-do-build-during-deployment: true
        enable-oryx-build: true

  github-release:
    runs-on: ubuntu-latest
    needs: [build-and-release-webapp, build-and-release-admin, build-and-release-docs]
    steps:
      - uses: actions/checkout@v4
      - name: Update GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          append_body: true
          generate_release_notes: true
          body_path: ${{ github.workspace }}/CHANGELOG.md
