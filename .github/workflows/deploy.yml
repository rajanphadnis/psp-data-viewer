name: "[CD:Production] Build and Release"
on:
  push:
    tags:
      - "v*.*.*"

env:
  PYTHON_VERSION: "3.11"

permissions:
  contents: write
jobs:
  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      - name: Web App Unit Tests
        run: cd webapp_v2 && bun install && bun run test
      - name: Admin App Unit Tests
        run: cd admin_v2 && bun install && bun run test
      - name: Customer Config Validity Checks
        run: bun install && bun run config_check
  changelog-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Tag/Release search
        run: echo "GHA_V_COUNTER=$(grep ${{ github.ref_name }} CHANGELOG.md | wc -l)" >> "$GITHUB_ENV"
        shell: bash
      - name: Tag Output
        run: echo "env.GHA_V_COUNTER = ${{ env.GHA_V_COUNTER }}"
        shell: bash
      - name: "If changelog isn't updated, delete the release and tag"
        uses: dev-drprasad/delete-tag-and-release@v1.0
        if: env.GHA_V_COUNTER == '0'
        with:
          tag_name: ${{ github.ref_name }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          delete_release: true
      - name: Find '${{ github.ref_name }}' in CHANGELOG.md
        if: env.GHA_V_COUNTER == '0'
        uses: actions/github-script@v2.1.0
        with:
          script: |
            core.setFailed('CHANGELOG.md not updated to include new release notes for ${{ github.ref_name }}!')
  version-check-webapp:
    runs-on: ubuntu-latest
    outputs:
      version-code: ${{ steps.version-code-gen.outputs.GHA_VERSION_CODE }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up new test tag
        run: |
          TAGNAME=${{ github.ref_name }}
          NEW_NAME="${TAGNAME//v/}"
          echo GHA_NEW_TAG_NAME_WEBAPP=$NEW_NAME >> "$GITHUB_ENV"
      - name: Tag/Release search
        run: echo "GHA_V_COUNTER_WEBAPP=$(grep '${{ format('"version"{0}', ':') }} "${{ env.GHA_NEW_TAG_NAME_WEBAPP }}"' webapp_v2/package.json | wc -l)" >> "$GITHUB_ENV"
        shell: bash
      - name: Tag Output
        run: |
          echo "env.GHA_V_COUNTER_WEBAPP = ${{ env.GHA_V_COUNTER_WEBAPP }}"
          echo "env.GHA_NEW_TAG_NAME_WEBAPP = ${{ env.GHA_NEW_TAG_NAME_WEBAPP }}"
        shell: bash
      - name: "If pubspec isn't updated, delete the release and tag"
        uses: dev-drprasad/delete-tag-and-release@v1.0
        if: env.GHA_V_COUNTER_WEBAPP == '0'
        with:
          tag_name: ${{ github.ref_name }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          delete_release: true
      - name: Find '${{ github.ref_name }}' in package.json
        if: env.GHA_V_COUNTER_WEBAPP == '0'
        uses: actions/github-script@v2.1.0
        with:
          script: |
            core.setFailed('webapp_v2/package.json not updated to new version ${{ env.GHA_NEW_TAG_NAME_WEBAPP }}!')
  version-check-admin:
    runs-on: ubuntu-latest
    outputs:
      version-code: ${{ steps.version-code-gen.outputs.GHA_VERSION_CODE }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up new test tag
        run: |
          TAGNAME=${{ github.ref_name }}
          NEW_NAME="${TAGNAME//v/}"
          echo GHA_NEW_TAG_NAME_ADMIN=$NEW_NAME >> "$GITHUB_ENV"
      - name: Tag/Release search
        run: echo "GHA_V_COUNTER_ADMIN=$(grep '${{ format('"version"{0}', ':') }} "${{ env.GHA_NEW_TAG_NAME_ADMIN }}"' admin_v2/package.json | wc -l)" >> "$GITHUB_ENV"
        shell: bash
      - name: Tag Output
        run: |
          echo "env.GHA_V_COUNTER_ADMIN = ${{ env.GHA_V_COUNTER_ADMIN }}"
          echo "env.GHA_NEW_TAG_NAME_ADMIN = ${{ env.GHA_NEW_TAG_NAME_ADMIN }}"
        shell: bash
      - name: "If pubspec isn't updated, delete the release and tag"
        uses: dev-drprasad/delete-tag-and-release@v1.0
        if: env.GHA_V_COUNTER_ADMIN == '0'
        with:
          tag_name: ${{ github.ref_name }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          delete_release: true
      - name: Find '${{ github.ref_name }}' in package.json
        if: env.GHA_V_COUNTER_ADMIN == '0'
        uses: actions/github-script@v2.1.0
        with:
          script: |
            core.setFailed('admin_v2/package.json not updated to new version ${{ env.GHA_NEW_TAG_NAME_ADMIN }}!')
  version-check-docs:
    runs-on: ubuntu-latest
    outputs:
      version-code: ${{ steps.version-code-gen.outputs.GHA_VERSION_CODE }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up new test tag
        run: |
          TAGNAME=${{ github.ref_name }}
          NEW_NAME="${TAGNAME//v/}"
          echo GHA_NEW_TAG_NAME_ADMIN=$NEW_NAME >> "$GITHUB_ENV"
      - name: Tag/Release search
        run: echo "GHA_V_COUNTER_ADMIN=$(grep '${{ format('"version"{0}', ':') }} "${{ env.GHA_NEW_TAG_NAME_ADMIN }}"' docs/package.json | wc -l)" >> "$GITHUB_ENV"
        shell: bash
      - name: Tag Output
        run: |
          echo "env.GHA_V_COUNTER_ADMIN = ${{ env.GHA_V_COUNTER_ADMIN }}"
          echo "env.GHA_NEW_TAG_NAME_ADMIN = ${{ env.GHA_NEW_TAG_NAME_ADMIN }}"
        shell: bash
      - name: "If package.json isn't updated, delete the release and tag"
        uses: dev-drprasad/delete-tag-and-release@v1.0
        if: env.GHA_V_COUNTER_ADMIN == '0'
        with:
          tag_name: ${{ github.ref_name }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          delete_release: true
      - name: Find '${{ github.ref_name }}' in package.json
        if: env.GHA_V_COUNTER_ADMIN == '0'
        uses: actions/github-script@v2.1.0
        with:
          script: |
            core.setFailed('docs/package.json not updated to new version ${{ env.GHA_NEW_TAG_NAME_ADMIN }}!')
  version-check-mission:
    runs-on: ubuntu-latest
    outputs:
      version-code: ${{ steps.version-code-gen.outputs.GHA_VERSION_CODE }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up new test tag
        run: |
          TAGNAME=${{ github.ref_name }}
          NEW_NAME="${TAGNAME//v/}"
          echo GHA_NEW_TAG_NAME_MISSION=$NEW_NAME >> "$GITHUB_ENV"
      - name: Tag/Release search
        run: echo "GHA_V_COUNTER_MISSION=$(grep '${{ format('"version"{0}', ':') }} "${{ env.GHA_NEW_TAG_NAME_MISSION }}"' mission/package.json | wc -l)" >> "$GITHUB_ENV"
        shell: bash
      - name: Tag Output
        run: |
          echo "env.GHA_V_COUNTER_MISSION = ${{ env.GHA_V_COUNTER_MISSION }}"
          echo "env.GHA_NEW_TAG_NAME_MISSION = ${{ env.GHA_NEW_TAG_NAME_MISSION }}"
        shell: bash
      - name: "If pubspec isn't updated, delete the release and tag"
        uses: dev-drprasad/delete-tag-and-release@v1.0
        if: env.GHA_V_COUNTER_MISSION == '0'
        with:
          tag_name: ${{ github.ref_name }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          delete_release: true
      - name: Find '${{ github.ref_name }}' in package.json
        if: env.GHA_V_COUNTER_MISSION == '0'
        uses: actions/github-script@v2.1.0
        with:
          script: |
            core.setFailed('mission/package.json not updated to new version ${{ env.GHA_NEW_TAG_NAME_MISSION }}!')
  version-check-desktop:
    runs-on: ubuntu-latest
    outputs:
      version-code: ${{ steps.version-code-gen.outputs.GHA_VERSION_CODE }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up new test tag
        run: |
          TAGNAME=${{ github.ref_name }}
          NEW_NAME="${TAGNAME//v/}"
          echo GHA_NEW_TAG_NAME_DESKTOP=$NEW_NAME >> "$GITHUB_ENV"
      - name: Tag/Release search
        run: echo "GHA_V_COUNTER_DESKTOP=$(grep '${{ format('"version"{0}', ':') }} "${{ env.GHA_NEW_TAG_NAME_DESKTOP }}"' desktop_app/package.json | wc -l)" >> "$GITHUB_ENV"
        shell: bash
      - name: Tag Output
        run: |
          echo "env.GHA_V_COUNTER_DESKTOP = ${{ env.GHA_V_COUNTER_DESKTOP }}"
          echo "env.GHA_NEW_TAG_NAME_DESKTOP = ${{ env.GHA_NEW_TAG_NAME_DESKTOP }}"
        shell: bash
      - name: "If pubspec isn't updated, delete the release and tag"
        uses: dev-drprasad/delete-tag-and-release@v1.0
        if: env.GHA_V_COUNTER_DESKTOP == '0'
        with:
          tag_name: ${{ github.ref_name }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          delete_release: true
      - name: Find '${{ github.ref_name }}' in package.json
        if: env.GHA_V_COUNTER_DESKTOP == '0'
        uses: actions/github-script@v2.1.0
        with:
          script: |
            core.setFailed('desktop_app/package.json not updated to new version ${{ env.GHA_NEW_TAG_NAME_DESKTOP }}!')

  generate_matrix:
    needs:
      [
        unit-tests,
        changelog-check,
        version-check-webapp,
        version-check-admin,
        version-check-docs,
        version-check-mission,
        version-check-desktop,
      ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Get list of YAML files
        id: list-matrix
        run: find ./customer_configs/ -type f -name "*.yml" | sed 's/\.\/customer_configs\///' | sed 's/.*/"&"/' | awk '{print}' ORS=', ' | rev | cut -c 3- | rev | sed 's/.*/configs={\"config\":[&]}/' >> $GITHUB_OUTPUT
    outputs:
      configs: ${{ steps.list-matrix.outputs.configs }}

  build:
    runs-on: ubuntu-latest
    needs: generate_matrix
    strategy:
      matrix: ${{ fromJson(needs.generate_matrix.outputs.configs) }}
    # strategy:
    #   matrix:
    #     config: ["dev.yml"]
    name: Build & Deploy Webapp from ${{ matrix.config }}
    environment:
      name: "Production"
    steps:
      - uses: actions/checkout@v4
      - name: Read Config File
        uses: pietrobolcato/action-read-yaml@1.1.0
        id: get_config
        with:
          config: ${{ github.workspace }}/customer_configs/${{ matrix.config }}
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      - name: Build Web App
        working-directory: ./webapp_v2
        run: bun install && bun run prod ${{ matrix.config }}
      - name: Release Web App
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_DATAVIEWER_SPACE }}
          channelId: live
          projectId: dataviewer-space
          target: webapp

  build-desktop-app:
    runs-on: windows-latest
    needs: unit-tests
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      - uses: actions-rs/toolchain@v1.0.6
        with:
          toolchain: stable
          profile: minimal
      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: "desktop_app/src-tauri -> target"
      - name: Build App
        working-directory: ./desktop_app
        run: bun install && bun run prod && bun run tauri build
      - name: Upload Portable EXE
        uses: actions/upload-artifact@v4
        with:
          name: sfx-archive
          path: ./desktop_app/src-tauri/target/release/desktop-app.exe
          compression-level: 0 # no compression
          retention-days: 1

  deploy-site:
    runs-on: ubuntu-latest
    needs: build-desktop-app
    name: Build & Deploy Website
    environment:
      name: "Production"
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      - name: Download EXE
        uses: actions/download-artifact@v4
        with:
          name: sfx-archive
          path: website/public
      - name: Make envfile
        uses: SpicyPizza/create-envfile@v2.0
        with:
          envkey_APP_CHECK_KEY: ${{ secrets.APP_CHECK_DEV_KEY }}
          envkey_STRIPE_PK: ${{ secrets.STRIPE_PK }}
          envkey_GITHUB_WORKFLOW_KEY: ${{ secrets.WORKFLOW_KEY }}
          directory: ./website
          file_name: .env.prod.publish
          fail_on_empty: false
          sort_keys: false
      - name: Build Web App
        working-directory: ./website
        run: bun install && bun run prod
      - name: Release Web App
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_DATAVIEWER_SPACE }}
          channelId: live
          projectId: dataviewer-space
          target: website

  deploy-admin:
    runs-on: ubuntu-latest
    needs: generate_matrix
    name: Build & Deploy Admin Console
    environment:
      name: "Production"
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      - name: Build Web App
        working-directory: ./admin_v2
        run: bun install && bun run prod
      - name: Release Web App
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_DATAVIEWER_SPACE }}
          channelId: live
          projectId: dataviewer-space
          target: admin

  deploy-docs:
    runs-on: ubuntu-latest
    needs: generate_matrix
    name: Build & Deploy Docs
    environment:
      name: "Production"
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      - name: Build Docs Webapp
        working-directory: ./docs
        run: bun install && bun run build
      - name: Release Webapp
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_DATAVIEWER_SPACE }}
          channelId: live
          projectId: dataviewer-space
          target: docs

  github-release:
    runs-on: ubuntu-latest
    needs: [build, build-desktop-app, deploy-site, deploy-admin, deploy-docs]
    environment:
      name: "Production"
    steps:
      - uses: actions/checkout@v4
      - name: Download a single artifact
        uses: actions/download-artifact@v4
        with:
          name: sfx-archive
      - name: trim changelog to most recent change entry
        run: "{ awk '/^## /{count++} count==2{exit} 1' CHANGELOG.md; echo '...'; } >> trimmed_change.md"
      - name: Update GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          append_body: true
          generate_release_notes: true
          body_path: ${{ github.workspace }}/trimmed_change.md
          files: desktop-app.exe
